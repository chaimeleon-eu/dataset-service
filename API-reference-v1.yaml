openapi: 3.0.0

info:
  title: Dataset service
  description: 'API to manage datasets.'
  version: "1.0.0"
  contact:
    email: palollo@i3m.upv.es
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

externalDocs:
  description: Project source code
  url: https://github.com/chaimeleon-eu/dataset-service

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/UPV-CHAIMELEON/Dataset-service/1.0.0
    
tags:
  - name: dataset
    description: Operations with datasets
    
security: 
  - bearerAuth: []
    
paths:
          
  /datasets:
    post:
      tags:
        - datasets
      summary: creates a new dataset
      operationId: createDataset
      description: Creates a new dataset into the system.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetCreationObject'
      responses:
        '200':
          description: item created
          content:
            application/json:
              schema:
                type: object
                example: '{"url": "/api/datasets/f99017af-9015-4222-b064-77f3c1b49d8b"}'
                properties:
                  url:
                    type: string
                    description: 'The URL where details of the new dataset can be obtained.'
        '400':
          description: 'invalid input, object invalid'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - datasets
      summary: list datasets
      operationId: listDatasets
      description: |
        You can list all available datasets in the system or search by name. 
        If not searchString or empty, then all datasets are listed.
      parameters:
        - name: draft
          description: "(Optional filter) If true, only draft datasets will be shown (those created by the user); if false, only not draft datasets will be shown; if not set, both types of dataset will be shown."
          in: query
          required: false
          schema:
            type: boolean
        - name: public
          description: "(Optional filter) If true, only public datasets will be shown; if false, only non-public datasets will be shown (depending on the user permissions); if not set, both types of dataset will be shown."
          in: query
          required: false
          schema:
            type: boolean
        - name: invalidated
          description: "(Optional filter) If true, only invalidated datasets will be shown (depending on the user permissions); if false, only not invalidated datasets will be shown; if not set, both types of dataset will be shown."
          in: query
          required: false
          schema:
            type: boolean
        - name: searchString
          description: "(Optional, default is empty) Pass an optional search string (case-insensitive) for the name of dataset."
          in: query
          required: false
          schema:
            type: string
        - name: skip
          description: "(Optional, default=0) Number of records to skip for pagination."
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: limit
          description: "(Optional, default=30) Maximum number of records to return (records per page), value of 0 means no limit."
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
      responses:
        '200':
          description: "Search results matching criteria"
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    format: int32
                    description: "Total of records found with the search criteria"
                  returned:
                    type: integer
                    format: int32
                    description: "Number of records returned (can be smaller because of skip and limit params)"
                  skipped:
                    type: integer
                    format: int32
                    description: "Number of records skipped from the beginning (as requested)"
                  limit:
                    type: integer
                    format: int32
                    description: "Limit of records fixed by the request (usually the page size)"
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/DatasetListItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
          
  /datasets/{id}:
    get:
      tags:
        - datasets
      summary: gets a dataset by its id
      operationId: getDataset
      description: Returns the details of a dataset specified by its id.
      parameters:
        - name: id
          description: the id of the dataset
          in: path
          required: true
          schema:
            type: string
        - name: studiesSkip
          description: "(optional, default=0) number of studies to skip for pagination"
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: studiesLimit
          description: "(optional, default=30) maximum number of studies to return (records per page), value of 0 means no limit"
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "not found"
    patch:
      tags:
        - datasets
      summary: changes a property of a dataset by its id
      operationId: modifyDataset
      description: "Changes a property of a dataset in the system."
      parameters:
        - name: id
          description: "the id of the dataset to modify"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: '{"property": "public", "value": true}'
              properties:
                property:
                  type: string
                  description: |
                    The name of the property to change. 
                    The properies that can be changed depend on the current state of dataset and the current user, see the property "editablePropertiesByTheUser" returned by GET. 
                    See the DatasetDetails schema to get definitions of each of these properties.
                  enum:
                   - "draft"
                   - "public"
                   - "invalidated"
                   - "name"
                   - "description"
                   - "license"
                   - "pids"
                   - "contactInfo"
                value:
                  type: object
                  description: "The new value to assign. The type depends on the property."
      responses:
        '200':
          description: "successful operation"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400': 
          description: "bad request content"
        '404':
          description: "not found"
          
  /upgradableDatasets:
    get:
      tags:
        - datasets
      summary: list datasets that can be upgraded by the user
      operationId: listUpgradableDatasets
      description: |
        Lists all datasets that can be upgraded by the authenticated user. 
        Upgrade a dataset means create another dataset that improves or correct this one and thus the previousId property of the new one will be filled with the id of this one.
      responses:
        '200':
          description: "list successfully retrieved"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: "00e821c4-e92b-48f7-a034-ba2df547e2bf"
                    name:
                      type: string
                      description: "Short descriptive name."
                      example: "Lung cancer v3"
        '401':
          $ref: '#/components/responses/Unauthorized'
      
  
  /users/{userName}:
    put:
      tags:
        - users
      summary: new user
      operationId: createUser
      description: |
        Creates a new user if not exists assigning a new unique GID. The user will be able to access dataset files depending on the groups (s)he belongs."
      parameters:
        - name: userName
          description: the unique userName of the user
          example: "user1"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example: '{"uid": "d290f1ee-6c54-4b01-90e6-d701748f0851", "groups": ["data-scientists", "dataset-administrator"]}'
            schema:
              type: object
              properties:
                uid:
                  type: string
                  description: The unique ID of the user.
                groups:
                  type: array
                  description: Array of the groups which the user belongs to.
                  items:
                    type: string
      responses:
        '201':
          description: item created
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - users
      summary: gets user GID
      operationId: getUser
      description: "Returns the gid of a user"
      parameters:
        - name: userName
          description: "The userName of the user"
          example: "user1"
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  gid:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "not found"
  /licenses:
    get:
      tags:
        - licenses
      summary: list licenses
      operationId: listLicenses
      description: "List all available licenses for datasets."
      responses:
        '200':
          description: "successfully retrieved the list of licenses"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/License'
        '401':
          $ref: '#/components/responses/Unauthorized'
          

  /datasetAccessCheck:
    post:
      tags:
        - datasets
      summary: 'check the access to datasets'
      operationId: checkDatasetAccess
      description: |
        It is called when a user wants to access to one or more datasets. The access will be granted or denied according to the groups of the user."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  description: the unique userName of the user
                  example: "user1"
                datasets:
                  type: array
                  description: the ids of datasets to access
                  items:
                    type: string
                    format: uuid
                    example: "00e821c4-e92b-48f7-a034-ba2df547e2bf"
      responses:
        '204':
          description: access granted
        '403':
          description: access denied
          content:
            application/json:
              schema:
                type: array
                description: the ids of datasets not found, invalidated or not available for the user
                items:
                  type: string
                  format: uuid
                  example: "00e821c4-e92b-48f7-a034-ba2df547e2bf"
        '401':
          $ref: '#/components/responses/Unauthorized'
  /datasetAccess/{id}:
    post:
      tags:
        - datasets
      summary: new access to datasets
      operationId: createDatasetAccess
      description: |
        It is called when a user access to one or more datasets. The access will be granted (and annotated in tracer) or denied according to the groups of the user."
      parameters:
        - name: id
          description: "The id of the datasetAccess, it can be the uid of the kubernetes object (deployment, job, pod...). When the user finishes the access, the DELETE operation should be called with that same id."
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  description: the unique userName of the user
                  example: "user1"
                datasets:
                  type: array
                  description: the ids of datasets to access
                  items:
                    type: string
                    format: uuid
                    example: "00e821c4-e92b-48f7-a034-ba2df547e2bf"
                toolName:
                  type: string
                  description: the name of application, framework, docker image or helm chart used to analyze or process the datasets
                  example: "tensorflow-workstation"
                toolVersion:
                  type: string
                  description: the version of application, framework, docker image or helm chart used to analyze or process the datasets
                  example: "1.1"
      responses:
        '201':
          description: item created, access granted
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 status_code:
#                   type: string
#                   description: HTTP status code
#                 msg:
#                   type: string
#                   description: descriptive message
#                 datasetAccessId:
#                   type: string
#                   format: uuid
#                   description: the id of the datasetAccess created
#                   example: "00e821c4-e92b-48f7-a034-ba2df547e2bf"
        '403':
          description: access denied
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      tags:
        - datasets
      summary: closes a previous access to datasets
      operationId: closeDatasetAccess
      description: "It is called when a user ends the work over one o more datasets whose access have been required previously."
      parameters:
        - name: id
          description: "The id of the datasetAccess created previously, usually the uid of the kubernetes object (deployment, job, pod...)."
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "not found"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    DatasetListItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "00e821c4-e92b-48f7-a034-ba2df547e2bf"
        name:
          type: string
          description: "Short descriptive name."
          example: "Lung cancer v3"
        authorName:
          type: string
          description: "The name of the user wich created the dataset."
          example: "James Gordon"
        creationDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        draft:
          type: boolean
          description: "If true then the dataset is only accesible by the author and some properties can be modified."
        public:
          type: boolean
          description: "If false then the dataset is only accessible to users with the role access_all_datasets (consortium researchers); if true then the dataset is also accessible to all users, including external researchers and non-registered users."
        invalidated:
          type: boolean
          description: "If true the dataset can not be used and only appears in the list for the author."
        studiesCount:
          type: integer
          description: "The number of studies contained in the dataset."
        subjectsCount:
          type: integer
          description: "The number of different subjects which are related with the studies contained in the dataset."
          
    DatasetCreationObject:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 128
          description: "Short descriptive name."
          example: "Lung cancer v3"
        previousId:
          type: string
          format: uuid
          description: "(Optional) Specified when is a new version of a previous dataset."
          example: "00e821c4-e92b-48f7-a034-ba2df547e2bf"
        description:
          type: string
          description: "Long explanation of dataset details, statistics, links, references, improvements/modifications if it's a new version, etc."
        studies:
          type: array
          items:
            $ref: '#/components/schemas/Study'
        subjects:
          type: array
          description: 'Subjects of studies and their clinical data.'
          items:
            $ref: '#/components/schemas/Subject'
    
    DatasetDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "00e821c4-e92b-48f7-a034-ba2df547e2bf"
        name:
          type: string
          minLength: 3
          maxLength: 128
          description: "Short descriptive name."
          example: "Lung cancer v3"
        previousId:
          type: string
          format: uuid
          description: "Specified when this is a new version of a previous dataset. Otherwise null."
          example: "efa2cba6-4a17-4612-8074-7e9eb9c9d7ca"
        authorId:
          type: string
          description: "The unique id of the user wich created the dataset, it is not for showing but it can be useful to a possible new feature to show all datasets from an author."
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        authorName:
          type: string
          minLength: 3
          maxLength: 128
          description: "The name of the user wich created the dataset."
          example: "James Gordon"
        authorEmail:
          type: string
          minLength: 3
          maxLength: 128
          format: email
          description: "The email of the user wich created the dataset."
          example: "james@email.com"
        creationDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        description:
          type: string
          description: "Long explanation of dataset details, statistics, links, references, improvements/modifications if it's a new version, etc."
        license:
          type: object
          description: "Name and link to the license document."
          example: '{"title": "Creative Commons Attribution 4.0 International", "url": "https://creativecommons.org/licenses/by/4.0/legalcode"}'
          properties:
            title:
              type: string
              maxLength: 128
            url:
              type: string
              maxLength: 256
        pids:
          type: object
          description: |
            Permanent IDs as links, to show the users how the dataset should be cited.
          properties:
            preferred:
              type: string
              description: |
                The name of property in "urls" selected by the dataset creator, the preferred for references or citations.
                It is null in newly created datasets.
                The first time that the value of "zenodoDoi" is used, a deposition will be created in Zenodo for this dataset and the DOI obtained will be saved in the "urls.zenodoDoi" property.
              example: "zenodoDoi"
            urls:
              type: object
              properties:
                zenodoDoi:
                  type: string
                  readOnly: true
                  description: |
                    The Zenodo DOI in URL format, which is a link to the Zenodo deposition if it has been created for the dataset.
                    It is null in newly created datasets. It will be autogenerated when the dataset is published (without a custom pid) or, before being published, with a PATCH {"property": "pids", "value": {"preferred": "zenodoDoi"}}
                  example: "https://doi.org/10.5072/zenodo.1081030"
                custom:
                  type: string
                  description: | 
                    A custom URL that the dataset creator prefer for citations.
                    It should be not null if preferred is "custom". 
                    Example for set custom pid url: PATCH {"property": "pids", "value": {"preferred": "custom", {"urls": {"custom": "https://myDatasetsDB.com/ds327"}}}}.
                  example: "https://myDatasetsDB.com/ds327"
        contactInfo:
          type: string
          maxLength: 256
          description: "(Optional) Contact information of the responsible of the dataset, usually a name and email."
          example: "James Gordon (james@email.com)"
        studies:
          type: object
          properties:
            total:
              type: integer
              format: int32
              description: "Total of records."
            returned:
              type: integer
              format: int32
              description: "Number of records returned (can be smaller because of skip and limit params)."
            skipped:
              type: integer
              format: int32
              description: "Number of records skipped from the beginning (as requested)."
            limit:
              type: integer
              format: int32
              description: "Limit of records fixed by the request (usually the page size)."
            list:
              type: array
              items:
                $ref: '#/components/schemas/Study'
#       gid:
#         type: integer
#         description: group id with the permissions to see the directories of studies selected for this dataset
        draft:
          type: boolean
          description: "If true then the dataset is only accesible by the author and some properties can be modified."
        public:
          type: boolean
          description: "If false then the dataset is only accessible to users with the role access_all_datasets (consortium researchers); if true then the dataset is also accessible to all users, including external researchers and non-registered users."
        invalidated:
          type: boolean
          description: "If true the dataset can not be used and only appears in the list for the author."
        editablePropertiesByTheUser:
          type: array
          description: "The properties that can be modified with PATCH operation by the current authenticated user in the current state of this dataset. The array will be empty if no properties can be modified."
          example: '["public", "invalidated", "name", "description"]'
          items:
            type: string
        studiesCount:
          type: integer
          description: "The number of studies contained in the dataset"
        subjectsCount:
          type: integer
          description: "The number of different subjects which are related with the studies contained in the dataset"
        ageLow:
          type: integer
          description: "[Miabis] Age of youngest subject. Null if can not be collected from dataset contents."
        ageHigh:
          type: integer
          description: "[Miabis] Age of oldest subject. Null if can not be collected from dataset contents."
        ageUnit:
          type: array
          description: "[Miabis] Array of two items: unit for ageLow, unit for ageHigh. Empty if age can not be collected from dataset contents."
          example: '["years", "years"]'
          items:
            type: string
        sex:
          type: array
          description: "[Miabis] Array of different sex values in the dataset. Empty if can not be collected from dataset contents."
          example: '["Male", "Female"]'
          items:
            type: string
        bodyPart:
          type: array
          description: "Array of different body parts (Dicom tag) in the dataset. Empty if can not be collected from dataset contents."
          example: '["LUNG"]'
          items:
            type: string
        modality:
          type: array
          description: "Array of different modalities (Dicom tag) in the dataset. Empty if can not be collected from dataset contents."
          example: '["CT"]'
          items:
            type: string
        seriesTags:
          type: array
          description: "Array of different tags in series of the studies of the dataset."
          example: '["Axial", "T2W"]'
          items:
            type: string
    Study:
      type: object
      properties:
        studyId:
          type: string
          example: "5e5629835938d12160636353"
        studyName:
          type: string
          maxLength: 128
          example: "TCPEDITRICOABDOMINOPLVICOCONCONTRASTE"
        subjectName:
          type: string
          maxLength: 128
          description: "The subject name, which is anonymized and unique: there should be an entry in the subjects array with that code."
          example: "17B76FEW"
        pathInDatalake:
          type: string
          maxLength: 256
          description: |
            Path to the folder of the study in the datalake (the structure usually should be: <userName>/<subjectName>_<trial>/<studyName><studyDate>/). 
            It is required in POST /datasets but it will not be included in GET /datasets/{id} for privacy reasons.
          example: "blancagomez/17B76FEW_Neuroblastoma/TCPEDITRICOABDOMINOPLVICOCONCONTRASTE20150129/"
        series:
          type: array
          description: 'Series considered in the dataset. This is needed because new series can be added later in the datalake for this study but the dataset can not change.'
          items:
            $ref: '#/components/schemas/Series'
        url:
          type: string
          maxLength: 256
          format: url
          description: "link to the study in the case explorer web portal" 
          example: 'https://www.quibim.com/studies?id=5e5629835938d12160636353'
          
    Series:
      type: object
      properties:
        folderName:
          type: string
          description: 'Directory name of the series'
          example: "AXT1XL"
        tags:
          type: array
          description: 'A list of tags assigned to the series'
          example: '["Axial", "T2W"]'
          items:
            type: string
    Subject:
      type: object
      properties:
        subjectName:
          type: string
          maxLength: 128
          description: "The subject name, which is anonymized and unique"
        subjectId:
          type: string
          maxLength: 32
          description: "The datalake explorer internal ID"
        eForm:
          type: object
          description: "The clinical data of the subject"
      
    License:
      type: object
      properties:
        title:
          type: string
          maxLength: 128
          example: "CC BY 4.0"
        url:
          type: string
          maxLength: 256
          format: url
          example: "https://creativecommons.org/licenses/by/4.0/"
          
      
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: descriptive message
        status_code:
          type: string
          description: HTTP status code
          
  responses:
    Unauthorized:
      description: "unauthorized user or access token is missing or invalid"
