openapi: 3.0.0

info:
  title: Dataset service
  description: 'API to manage datasets.'
  version: "1.0.0"
  contact:
    email: ds.chaimeleon-eu@i3m.upv.es
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

externalDocs:
  description: Project source code
  url: https://github.com/chaimeleon-eu/dataset-service

servers:
  - url: https://chaimeleon-eu.i3m.upv.es/dataset-service/api
  ## Added by API Auto Mocking Plugin
  #- description: SwaggerHub API Auto Mocking
  #  url: https://virtserver.swaggerhub.com/UPV-CHAIMELEON/Dataset-service/1.0.0

tags:
  - name: datasets
    description: Operations with datasets
  - name: users
    description: Operations with users
  - name: projects
    description: Operations with projects
  - name: licenses
    description: Operations with licenses
  - name: datasetAccesses
    description: Operations with datasetAccesses
    
  - name: datasetDetails_schema
    x-displayName: DatasetDetails
    description: <SchemaDefinition schemaRef="#/components/schemas/DatasetDetails" />

x-tagGroups:
  - name: OPERATIONS
    tags:
      - datasets
      - users
      - projects
      - licenses
      - datasetAccesses
  - name: SCHEMAS
    tags:
      - datasetDetails_schema

security: 
  - bearerAuth: []

paths:

  /datasets:
    post:
      tags: [datasets]
      summary: Create a new dataset
      operationId: createDataset
      description: Creates a new dataset into the system.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetCreationObject'
      responses:
        '201':
          description: item created
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: 'The URL to the dataset-explorer that you can show to the user as a link to the details of the new dataset.'
                    example: 'https://chaimeleon-eu.i3m.upv.es/dataset-service/datasets/f99017af-9015-4222-b064-77f3c1b49d8b/details'
                  apiUrl:
                    type: string
                    description: 'The URL to this API, where the details of the new dataset can be obtained.'
                    example: '/api/datasets/f99017af-9015-4222-b064-77f3c1b49d8b'
        '400':
          description: 'invalid input, object invalid'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags: [datasets]
      summary: List datasets
      operationId: listDatasets
      description: |
        You can list all available datasets in the system and optionally add some filters for flags, tags, name, id, author, project, etc.
        There are also some parameters for pagination and sorting the results.
      parameters:
        - name: draft
          description: |
            (Optional filter) 
            If true, only draft datasets will be shown (those created by the user).
            If false, only not draft datasets will be shown.
            If not set, both types of dataset will be shown.
          in: query
          required: false
          schema:
            type: boolean
        - name: public
          description: |
            (Optional filter)
            If true, only public datasets will be shown.
            If false, only non-public datasets will be shown (depending on the user permissions).
            If not set, both types of dataset will be shown.
          in: query
          required: false
          schema:
            type: boolean
        - name: invalidated
          description: |
            (Optional filter)
            If true, only invalidated datasets will be shown (depending on the user permissions).
            If false, only not invalidated datasets will be shown; 
            If not set, both types of dataset will be shown.
          in: query
          required: false
          schema:
            type: boolean
        - name: tags
          description: |
            (Optional filter) If set, only datasets with all those tags will be shown.
            Note as the type is array, you can repeat the parameter in the URL to send more than one tag.
            Tags can contain alphanumeric characters or '-', and with max length of 20.
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              pattern: '^[a-zA-Z-]+$'
              maxLength: 20
            example: ["train-partition", "annotated"]
        - name: project
          description: |
            (Optional filter) If set, only datasets of that project will be shown. 
            You can do "GET /projects" to obtain all the possible values.
          in: query
          required: false
          schema:
            type: string
            example: MY-PROJECT
        - name: searchString
          description: |
            (Optional, default is empty) 
            Pass an optional search string (or substring)(case-insensitive) for the name, id or author of dataset."
          in: query
          required: false
          schema:
            type: string
        - name: searchSubject
          description: |
            (Optional, default is empty)
            Pass an optional search string (or substring)(case-insensitive) for the name of a subject (actually the code, cause they are anonymised)
            which must be contained in the dataset.
            It can be useful for searching datasets to invalidate in case of a subject that must be taken out of the platform.
          in: query
          required: false
          schema:
            type: string
        - name: onlyLastVersions
          description: |
            (Optional, default is false)
            If true, "old" datasets will not be listed. 
            "old" means a dataset with the property "nextId" not null, i.e. there is another dataset which is the next version.
          in: query
          required: false
          schema:
            type: string
        - name: skip
          description: "(Optional, default=0) Number of records to skip for pagination."
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: limit
          description: "(Optional, default=30) Maximum number of records to return (records per page), value of 0 means no limit."
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: sortBy
          description: "(Optional, default=creationDate) The list will be sorted by this property."
          in: query
          required: false
          schema:
            type: string
            enum: 
             - "name"
             - "authorName"
             - "creationDate"
             - "studiesCount"
             - "subjectsCount"
        - name: sortDirection
          description: "(Optional) The list will be sorted in this direction."
          in: query
          required: false
          schema:
            type: string
            enum: 
             - "ascending"
             - "descending"
      responses:
        '200':
          description: "Search results matching criteria"
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    format: int32
                    description: "Total of records found with the search criteria"
                  returned:
                    type: integer
                    format: int32
                    description: "Number of records returned (can be lower than total because of skip and limit params)"
                  skipped:
                    type: integer
                    format: int32
                    description: "Number of records skipped from the beginning (as requested)"
                  limit:
                    type: integer
                    format: int32
                    description: "Limit of records fixed by the request (usually the page size)"
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/DatasetListItem'
                  allowedActionsForTheUser:
                    type: array
                    description: |
                      The actions that the current authenticated user can do on datasets. 
                      This property is intended for let the UI know which actions to show.
                      Possible values are:
                        * `create` - To show the boton/link to the creation form for a new dataset.
                    example: ["create"]
                    items:
                      type: string
                      enum: 
                        - "create"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /datasets/{id}:
    get:
      tags: [datasets]
      summary: Get a dataset by its id
      operationId: getDataset
      description: "Returns the details of a dataset specified by its id."
      parameters:
        - name: id
          description: "The id of the dataset."
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "not found"
    patch:
      tags: [datasets]
      summary: Change a property of a dataset by its id
      operationId: modifyDataset
      description: "Changes a property of a dataset in the system."
      parameters:
        - name: id
          description: "The id of the dataset to modify."
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {"property": "public", "value": true}
              properties:
                property:
                  type: string
                  description: |
                    The name of the property to change. 
                    The properies that can be changed depend on the current state of dataset and the current user, see the property "editablePropertiesByTheUser" returned by GET. 
                    See the DatasetDetails schema to get definition and value type for each of these properties.
                  enum:
                   - "draft"
                   - "public"
                   - "invalidated"
                   - "invalidationReason"
                   - "name"
                   - "version"
                   - "description"
                   - "tags"
                   - "provenance"
                   - "purpose"
                   - "type"
                   - "collectionMethod"
                   - "previousId"
                   - "license"
                   - "pids"
                   - "contactInfo"
                   - "authorId"
                value:
                  type: object
                  description: "The new value to assign. The type depends on the property, see the DatasetDetails schema."
      responses:
        '204':
          description: "Successful operation."
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400': 
          description: "Bad request content."
        '404':
          description: "Not found."
    delete:
      tags: [datasets]
      summary: Delete a dataset by its id
      operationId: deleteDataset
      description:  |
        Deletes a dataset in the system. 
        Normal users only can delete a dataset when it is still being created (or ended with error) (i.e. "creating" flag is true). 
        Once created it can be used, and this usage will be traced, so it cannot be deleted (the deletion would hide the usage), but it can be invalidated instead.
        Check if "allowedActionsForTheUser" contains "delete" to know if the user can delete.
      parameters:
        - name: id
          description: "The id of the dataset to delete."
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: "Successful operation."
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400': 
          description: "Bad request, it cannot be removed."
        '404':
          description: "Not found."

  /datasets/{id}/studies:
    get:
      tags: [datasets]
      summary: List studies of a dataset
      operationId: getDatasetStudies
      description: "Returns the list of studies in a dataset specified by its id."
      parameters:
        - name: id
          description: "The id of the dataset."
          in: path
          required: true
          schema:
            type: string
        - name: skip
          description: "(Optional, default=0) number of studies to skip for pagination."
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: limit
          description: "(Optional, default=30) Maximum number of studies to return (records per page), value of 0 means no limit."
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    format: int32
                    description: "Total of records."
                  returned:
                    type: integer
                    format: int32
                    description: "Number of records returned (can be lower than total because of skip and limit params)."
                  skipped:
                    type: integer
                    format: int32
                    description: "Number of records skipped from the beginning (as requested)."
                  limit:
                    type: integer
                    format: int32
                    description: "Limit of records fixed by the request (usually the page size)."
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Study'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "not found"

  /datasets/{id}/creationStatus:
    get:
      tags: [datasets]
      summary: Get the status of creation of a dataset by its id
      operationId: getDatasetCreationStatus
      description: Returns the details of the creation of a dataset specified by its id.
      parameters:
        - name: id
          description: the id of the dataset
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                     - "pending"
                     - "running"
                     - "finished"
                     - "error"
                  lastMessage:
                    type: string
                    description: "The last message of the process. This can be used to show the work progress to the user."
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "not found"

  /datasets/{id}/checkIntegrity:
    post:
      tags: [datasets]
      summary: Check the integrity of a dataset
      operationId: checkDatasetIntegrity
      description: |
        (This operation is intended only for the superadmin_datasets role; check if "allowedActionsForTheUser" contains "checkIntegrity".)
        Launch a process to read the entire dataset, calculate the hash and compare with the one stored in the creation.
        The result will be in the property "DatasetDetails.lastIntegrityCheck".
      parameters:
        - name: id
          description: the id of the dataset
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  msg:
                    type: string
                    description: "A descriptive message of result."
        '401':
          $ref: '#/components/responses/Unauthorized'

  /datasets/{id}/relaunchCreationJob:
    post:
      tags: [datasets]
      summary: Relaunch the creation job of a dataset
      operationId: relaunchDatasetCreationJob
      description: |
        (This operation is intended only for the superadmin_datasets role; check if "allowedActionsForTheUser" contains "relaunchCreationJob".)
        When a creation job is interrupted (and fail) for any reason and the admin fix the problem,
        then another creation job can be launched in k8s with this operation in order to restart and complete the process of creation.
      parameters:
        - name: id
          description: the id of the dataset
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: "successful operation"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "not found"

  /datasets/{id}/accessHistory:
    get:
      tags: [datasets]
      summary: List accesses of a dataset
      operationId: getDatasetAccessHistory
      description: |
        (This operation is intended only for the admin_datasetAccess role; check if "allowedActionsForTheUser" contains "viewAccessHistory".)
        Returns the list of accesses to a dataset specified by its id.
      parameters:
        - name: id
          description: The id of the dataset.
          in: path
          required: true
          schema:
            type: string
        - name: skip
          description: "(Optional, default=0) Number of accesses to skip for pagination."
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: limit
          description: "(Optional, default=30) Maximum number of accesss to return (records per page), value of 0 means no limit."
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    format: int32
                    description: "Total of records."
                  returned:
                    type: integer
                    format: int32
                    description: "Number of records returned (can be lower than total because of skip and limit params)."
                  skipped:
                    type: integer
                    format: int32
                    description: "Number of records skipped from the beginning (as requested)."
                  limit:
                    type: integer
                    format: int32
                    description: "Limit of records fixed by the request (usually the page size)."
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/DatasetAccess'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "not found"

  /datasets/{id}/acl:
    get:
      tags: [datasets]
      summary: Get the ACL of a dataset by its id
      operationId: getDatasetACL
      description: |
        (This operation is intended only for the admin_datasetAccess role; check if "allowedActionsForTheUser" contains "manageACL".)
        Returns the access control list (ACL) of a dataset specified by its id. 
        The ACL is a list of users who can use the dataset (in addition to the users joined to the project of the dataset).
        IMPORTANT: The ACL can be managed always but it is considered only when the dataset is public.
                   If the dataset is not public, only users joined to the project can use it.
      parameters:
        - name: id
          description: The id of the dataset.
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    uid:
                      type: string
                      format: uuid
                      example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
                    username:
                      type: string
                      description: "The username of the user which is also a unique identifier."
                      example: "user1"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "Not found."

  /datasets/{id}/acl/{username}:
    put:
      tags: [datasets]
      summary: Put a user to the ACL of the dataset
      operationId: putUserToDatasetACL
      description: |
        (This operation is intended only for the admin_datasetAccess role; check if "allowedActionsForTheUser" contains "manageACL".)
        Add a user to the ACL of the dataset if not exists (else do nothing). 
        The user will be able to access dataset files.
        This is only useful for users that are not joined to the project of the dataset (the users in the project will always be able to access).
      parameters:
        - name: id
          description: The id of the dataset.
          in: path
          required: true
          schema:
            type: string
        - name: username
          description: The unique username of the user.
          example: "user1"
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Item created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "Not found."
    delete:
      tags: [datasets]
      summary: Delete a user from the ACL of a dataset
      operationId: deleteUserFromDatasetACL
      description: |
        (This operation is intended only for the admin_datasetAccess role; check if "allowedActionsForTheUser" contains "manageACL".)
        Remove a user to the ACL of the dataset if exists (else do nothing). 
      parameters:
        - name: id
          description: The id of the dataset.
          in: path
          required: true
          schema:
            type: string
        - name: username
          description: The unique username of the user.
          example: "user1"
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: "Successful operation."
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "Not found."

  /upgradableDatasets:
    get:
      tags: [datasets]
      summary: List datasets that can be upgraded by the user
      operationId: listUpgradableDatasets
      description: |
        Lists all datasets that can be upgraded by the authenticated user. 
        Upgrade a dataset means create another dataset that improves or correct this one and thus the previousId property of the new one will be filled with the id of this one.
      responses:
        '200':
          description: "List successfully retrieved."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: "00e821c4-e92b-48f7-a034-ba2df547e2bf"
                    name:
                      type: string
                      description: "Short descriptive name."
                      example: "Lung cancer"
                    version:
                      type: string
                      maxLength: 16
                      example: "20240415"
        '401':
          $ref: '#/components/responses/Unauthorized'


  /users/{userName}:
    put:
      tags: [users]
      summary: Create new user
      operationId: createUser
      description: |
        Creates a new user if not exists assigning a new unique GID. 
        If exists it will be updated.
      parameters:
        - name: userName
          description: the unique userName of the user
          example: "user1"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example: {"uid": "d290f1ee-6c54-4b01-90e6-d701748f0851", "groups": ["data-scientists", "dataset-administrator"]}
            schema:
              type: object
              properties:
                uid:
                  type: string
                  description: (Optional) The unique ID of the user. 
                    Usually it is the ID from the auth service, so you can set if you know it, 
                    otherwise don't set and then it will be automatically obtained from auth service.
                gid:
                  type: integer
                  description: |
                    (Optional) The unique GID of the user. Set only if you want to assign some specific GID to the user.
                    That property is usually not set, so the GID is not changed if the user exists,
                    and if still does not exists, then a new unique GID will be autogenerated.
                roles:
                  type: array
                  description: (Optional) Array of the roles assigned to the user.
                  items:
                    type: string
                projects:
                  type: array
                  description: (Optional) Array of the projects the user will be assigned to.
                  items:
                    type: string
                site:
                  type: string
                  description: (Optional) The ID of site which the user belongs to.
      responses:
        '201':
          description: item created
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags: [users]
      summary: Get user GID
      operationId: getUser
      description: "Returns the gid of a user"
      parameters:
        - name: userName
          description: "The userName of the user"
          example: "user1"
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  gid:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "not found"

  /projects:
    get:
      tags: [projects]
      summary: List projects
      operationId: listProjects
      description: "List the projects depending on the purpose."
      parameters:
        - name: purpose
          description: |
            List the projects depending on the purpose:
             * `projectList` - List all the projects. Useful for a general list of projects, usually available in the main menu.
             * `datasetCreation` - List the possible values for the property "project" of new dataset (POST /datasets) according to the authenticated user. New datasets only can be assigned to one of the projects the user has joined to.
             * `datasetSearchFilter` - List all available projects which visible datasets can belong to.
                                       Useful to list the possible values for the param "project" in "GET /datasets"
          in: query
          required: true
          schema:
            type: string
            enum: 
              - "projectList"
              - "datasetCreation"
              - "datasetSearchFilter"
        - name: forNewDataset
          description: "(Deprecated, optional, default=false, purpose takes precedence if both params included) List projects which the user has joined to. New datasets only can be assigned to one of them."
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: |
            Successfully retrieved the list of projects.
            An array of string is returned in the body in case of purpose is `datasetCreation` or `datasetSearchFilter`.
            An object is returned in the body in case of purpose is `projectList`.
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      type: string
                      example: "MY-PROJECT"
                  - type: object
                    properties:
                      list:
                        type: array
                        items:
                          type: object
                          properties:
                            code:
                              $ref: '#/components/schemas/ProjectCode'
                            name:
                              type: string
                              maxLength: 128
                              description: "Long name of the project."
                              example: "A wonderful project."
                            logoUrl:
                              $ref: '#/components/schemas/ProjectLogoUrl'
                      allowedActionsForTheUser:
                        type: array
                        description: |
                          The actions that the current authenticated user can do on projects. 
                          This property is intended for let the UI know which actions to show.
                          Possible values are:
                           * `create` - To show the boton/link to the creation form for a new project.
                        example: ["create"]
                        items:
                          type: string
                          enum: 
                           - "create"
  
  /projects/{code}:
    put:
      tags: [projects]
      summary: Create new project
      operationId: createProject
      description: |
        Creates a new project or updates if already exists.
      parameters:
        - name: code
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ProjectCode'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ProjectDetails'
                - type: object
                  properties:
                    logoUrl:
                      type: string
                      description: |
                        Optional URL to an image logo of the project. 
                        The image will be automatically downloaded and stored in the server. 
                        Set to empty string if there is no logo for the project.
                      example: "https://some-project.org/img/logo.png"
                    projectConfig:
                      $ref: '#/components/schemas/ProjectConfig'
      responses:
        '201':
          description: project created or updated
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags: [projects]
      summary: Get the details of a project
      operationId: getProject
      parameters:
        - name: code
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ProjectCode'
      responses:
        '200':
          description: "successfully retrieved the details of the project"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ProjectDetails'
                  - type: object
                    properties:
                      code:
                        $ref: '#/components/schemas/ProjectCode'
                      logoUrl:
                        $ref: '#/components/schemas/ProjectLogoUrl'
                      editablePropertiesByTheUser:
                        type: array
                        description: |
                          The properties that can be modified with PATCH operation by the current authenticated user. 
                          The array will be empty if no properties can be modified.
                          The UI can use this property to show which properties are editable.
                        example: ["name", "shortDescription", "externalUrl", "logoUrl"]
                        items:
                          type: string
                      allowedActionsForTheUser:
                        type: array
                        description: |
                          The actions that the current authenticated user can do on the project. 
                          The actions are some operations apart from edit fields/flags which are already specified in the previous property "editablePropertiesByTheUser".
                          So this property is intended for let the UI know which other actions to show.
                          Possible values are:
                           * `config` - To show the form with the configuration params for the project.
                        example: ["config"]
                        items:
                          type: string
                          enum: 
                           - "config"
        '401':
          $ref: '#/components/responses/Unauthorized'
    patch:
      tags: [projects]
      summary: Change a property of a project by its code
      operationId: modifyProject
      parameters:
        - name: code
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ProjectCode'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: {"property": "description", "value": "This is an amazing project."}
              properties:
                property:
                  type: string
                  description: |
                    The name of the property to change. 
                    The properies that can be changed depend on the current user, see the property "editablePropertiesByTheUser" returned by GET. 
                    See the object returned by GET operation to know definition and value type for each of these properties.
                  enum:
                   - "name"
                   - "shortDescription"
                   - "externalUrl"
                   - "logoUrl"
                value:
                  type: object
                  description: "The new value to assign. The type depends on the property, see the object returned by GET operation."
      responses:
        '204':
          description: "Successful operation."
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400': 
          description: "Bad request content."
        '404':
          description: "Not found."

  /projects/{code}/config:
    put:
      tags: [projects]
      summary: Set the configuration of a project
      operationId: setProjectConfig
      description: "..."
      parameters:
        - name: code
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ProjectCode'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectConfig'
      responses:
        '201':
          description: "project configuration updated successfully"
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags: [projects]
      summary: Get the configuration of a project
      operationId: getProjectConfig
      description: "..."
      parameters:
        - name: code
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ProjectCode'
      responses:
        '200':
          description: "successfully retrieved the configuration of the project"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectConfig'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /licenses:
    get:
      tags: [licenses]
      summary: List licenses
      operationId: listLicenses
      description: "List all available licenses for datasets."
      responses:
        '200':
          description: "successfully retrieved the list of licenses"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/License'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /datasetAccessCheck:
    post:
      tags: [datasetAccesses]
      summary: Check the access to datasets
      operationId: checkDatasetAccess
      description: |
        It is called when a user wants to access to one or more datasets. The access will be granted or denied according to the groups of the user."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  description: the unique userName of the user
                  example: "user1"
                datasets:
                  type: array
                  description: the ids of datasets to access
                  items:
                    type: string
                    format: uuid
                    example: "00e821c4-e92b-48f7-a034-ba2df547e2bf"
      responses:
        '204':
          description: access granted
        '403':
          description: access denied
          content:
            application/json:
              schema:
                type: array
                description: the ids of datasets not found, still being created, invalidated or not available for the user
                items:
                  type: string
                  format: uuid
                  example: "00e821c4-e92b-48f7-a034-ba2df547e2bf"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /datasetAccess/{id}:
    post:
      tags: [datasetAccesses]
      summary: Create new access to datasets
      operationId: createDatasetAccess
      description: |
        It is called when a user access to one or more datasets. The access will be granted (and annotated in tracer) or denied according to the groups of the user."
      parameters:
        - name: id
          description: "The id of the datasetAccess, it can be the uid of the kubernetes object (deployment, job, pod...). When the user finishes the access, the DELETE operation should be called with that same id."
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  description: the unique userName of the user
                  example: "user1"
                datasets:
                  type: array
                  description: the ids of datasets to access
                  items:
                    type: string
                    format: uuid
                    example: "00e821c4-e92b-48f7-a034-ba2df547e2bf"
                toolName:
                  type: string
                  description: the name of application, framework, docker image or helm chart used to analyze or process the datasets
                  example: "tensorflow-workstation"
                toolVersion:
                  type: string
                  description: the version of application, framework, docker image or helm chart used to analyze or process the datasets
                  example: "1.1"
      responses:
        '201':
          description: item created, access granted
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 status_code:
#                   type: string
#                   description: HTTP status code
#                 msg:
#                   type: string
#                   description: descriptive message
#                 datasetAccessId:
#                   type: string
#                   format: uuid
#                   description: the id of the datasetAccess created
#                   example: "00e821c4-e92b-48f7-a034-ba2df547e2bf"
        '403':
          description: access denied
        '401':
          $ref: '#/components/responses/Unauthorized'

    patch:
      tags: [datasetAccesses]
      summary: Close a previous access to datasets
      operationId: closeDatasetAccess
      description: "It is called when a user ends the work over one o more datasets whose access have been required previously."
      parameters:
        - name: id
          description: "The id of the datasetAccess created previously, usually the uid of the kubernetes object (deployment, job, pod...)."
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "succeded"
                startTime:
                  type: string
                  description: the time when the access started in iso format
                  example: "2024-01-12T13:11:48Z"
                endTime:
                  type: string
                  description: the time when the access ended in iso format
                  example: "2024-01-12T15:31:14Z"
      responses:
        '200':
          description: successful operation
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "not found"


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    DatasetListItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "00e821c4-e92b-48f7-a034-ba2df547e2bf"
        name:
          type: string
          description: "Short descriptive name."
          example: "Lung cancer"
        version:
          type: string
          example: "20240415"
        authorName:
          type: string
          description: "The name of the user wich created the dataset."
          example: "James Gordon"
        creationDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        project:
          type: string
          description: "The code of the project which the dataset is assigned to."
          example: "MY-PROJECT"
        draft:
          type: boolean
          description: "If true then the dataset is only visible and usable by the author, and some properties can be modified."
        public:
          type: boolean
          description: |
            If false then the dataset is only visible and usable to users in the project where the dataset is assigned.
            If true then the dataset is accessible and usable to all users and visible for non-registered users.
        invalidated:
          type: boolean
          description: "If true the dataset can not be used and only visible for the author."
        corrupted:
          type: boolean
          description: "It is true when the integrity check has failed (files modified or even deleted). In that case, the dataset should be invalidated."
        tags:
          type: array
          items:
            type: string
            pattern: '^[a-zA-Z-]+$'
            maxLength: 20
          description: |
            Free text tags assignable to datasets for better organization and filtering.
            Tags can contain alphanumeric characters or '-', and with max length of 20.
          example: ["train-partition", "annotated"]
        studiesCount:
          type: integer
          description: "The number of studies contained in the dataset."
        subjectsCount:
          type: integer
          description: "The number of different subjects which are related with the studies contained in the dataset."
          
    DatasetCreationObject:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 128
          description: "Short descriptive name."
          example: "Lung cancer"
        version:
          type: string
          minLength: 0
          maxLength: 16
          description: "Optional for backward compatibility, but should be included in new implementations."
          example: "20240415"
        project:
          description: |
            (Optional) The code of the project which the dataset is assigned to.
            If not provided, it is assumed there is only one project in the system, so the first project found for the user will be taken.
          allOf:
            - $ref: '#/components/schemas/ProjectCode'
        previousId:
          type: string
          format: uuid
          description: "(Optional) Specified when it is a new version of a previous dataset."
          example: "00e821c4-e92b-48f7-a034-ba2df547e2bf"
        description:
          type: string
          description: "Long explanation of dataset details, statistics, links, references, improvements/modifications if it's a new version, etc."
        provenance:
          type: string
          description: |
            Short text with the provenance of the data.
            Optional for backward compatibility, but should be included in new implementations.
        purpose:
          type: string
          description: |
            Short text with the intended purpose of the dataset.
            Optional for backward compatibility, but should be included in new implementations.
        type:
          type: array
          description: "Optional for backward compatibility, but should be included in new implementations."
          example: ["annotated"]
          items:
            type: string
            enum:
             - "original"
             - "annotated"
             - "processed"
             - "personal-data"
        collectionMethod:
          type: array
          description: "Optional for backward compatibility, but should be included in new implementations."
          example: ["only-image","disease-specific"]
          items:
            type: string
            enum:
             - "patient-based"
             - "cohort"
             - "only-image"
             - "longitudinal"
             - "case-control"
             - "disease-specific"
        studies:
          type: array
          items:
            $ref: '#/components/schemas/StudyCreationObject'
        subjects:
          type: array
          description: 'Subjects of studies and their clinical data.'
          items:
            $ref: '#/components/schemas/Subject'

    StudyCreationObject:
      type: object
      properties:
        studyId:
          type: string
          maxLength: 40
          example: "5e5629835938d12160636353"
        studyName:
          type: string
          maxLength: 128
          example: "TCPEDITRICOABDOMINOPLVICOCONCONTRASTE"
        subjectName:
          type: string
          maxLength: 128
          description: "The subject name, which is anonymized and unique: there should be an entry in the subjects array with that code."
          example: "17B76FEW"
        pathInDatalake:
          type: string
          maxLength: 256
          description: |
            Path to the folder of the study in the datalake (the structure usually should be: \<userName\>/\<subjectName\>_\<trial\>/\<studyName\>\<studyDate\>). 
          example: "blancagomez/17B76FEW_Neuroblastoma/TCPEDITRICOABDOMINOPLVICOCONCONTRASTE20150129"
        series:
          type: array
          description: |
            Series considered in the dataset. 
            This is needed because new series can be added later in the datalake for this study but the dataset can not change.
          items:
            $ref: '#/components/schemas/Series'
        url:
          type: string
          maxLength: 256
          format: url
          description: "Link to the study in the case explorer web portal." 
          example: 'https://www.quibim.com/studies?id=5e5629835938d12160636353'
    
    DatasetDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "00e821c4-e92b-48f7-a034-ba2df547e2bf"
        name:
          type: string
          minLength: 3
          maxLength: 128
          description: "Short descriptive name."
          example: "Lung cancer"
        version:
          type: string
          maxLength: 16
          example: "20240415"
        project:
          description: "The code of the project which the dataset is assigned to."
          allOf:
            - $ref: '#/components/schemas/ProjectCode'
        previousId:
          type: string
          format: uuid
          description: "Specified when this is a new version of a previous dataset. Otherwise null."
          example: "efa2cba6-4a17-4612-8074-7e9eb9c9d7ca"
        nextId:
          type: string
          format: uuid
          description: |
            Specified when there is another dataset which is a new version of this one. Otherwise null.
            It is automatically set when the new version is released (i.e. "draft" flag changed to false).
            The new version is a dataset that have previousId referencing this one. Actually there can be more than one new versions in draft state, but only one can be released.
          example: "4bda04db-8b73-4a65-b1bb-d2011769a91a"
        authorId:
          type: string
          description: "The unique id of the user wich created the dataset, it is not for showing but it can be useful to a possible new feature to show all datasets from an author."
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        authorName:
          type: string
          minLength: 3
          maxLength: 128
          description: "The name of the user wich created the dataset."
          example: "James Gordon"
        authorEmail:
          type: string
          minLength: 3
          maxLength: 128
          format: email
          description: |
            The email of the user wich created the dataset.
            It will not be included if unregistered user for privacy reasons.
          example: "james@email.com"
        creationDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        description:
          type: string
          description: "Long explanation of dataset details, statistics, links, references, improvements/modifications if it's a new version, etc."
        tags:
          type: array
          items:
            type: string
            pattern: '^[a-zA-Z-]+$'
            maxLength: 20
          description: | 
            Free text tags assignable to datasets for better organization and filtering.
            Tags can contain alphanumeric characters or '-', and with max length of 20.
          example: ["train-partition", "annotated"]
        provenance:
          type: string
          description: "Short text with the provenance of the data."
        purpose:
          type: string
          description: "Short text with the intended purpose of the dataset."
        type:
          type: array
          example: ["annotated"]
          items:
            type: string
            enum:
             - "original"
             - "annotated"
             - "processed"
             - "personal-data"
        collectionMethod:
          type: array
          example: ["only-image", "disease-specific"]
          items:
            type: string
            enum:
             - "patient-based"
             - "cohort"
             - "only-image"
             - "longitudinal"
             - "case-control"
             - "disease-specific"
        license:
          $ref: '#/components/schemas/License'
        pids:
          type: object
          description: |
            Permanent IDs as links, to show the users how the dataset should be cited.
          properties:
            preferred:
              type: string
              description: |
                The name of property in "urls" selected by the dataset creator, the preferred for references or citations.
                It is null in newly created datasets.
                The first time that the value of "zenodoDoi" is used, a deposition will be created in Zenodo for this dataset and the DOI obtained will be saved in the "urls.zenodoDoi" property.
              example: "zenodoDoi"
            urls:
              type: object
              properties:
                zenodoDoi:
                  type: string
                  readOnly: true
                  description: |
                    The Zenodo DOI in URL format, which is a link to the Zenodo deposition if it has been created for the dataset.
                    It is null in newly created datasets. 
                    It will be autogenerated when the dataset is published (without a custom pid) or, before being published, with a PATCH {"property": "pids", "value": {"preferred": "zenodoDoi"}}.
                  example: "https://doi.org/10.5072/zenodo.1081030"
                custom:
                  type: string
                  description: | 
                    A custom URL that the dataset creator prefer for citations.
                    It should be not null if preferred is "custom". 
                    Example for set custom pid url: PATCH {"property": "pids", "value": {"preferred": "custom", {"urls": {"custom": "https://myDatasetsDB.com/ds327"}}}}.
                  example: "https://myDatasetsDB.com/ds327"
        contactInfo:
          type: string
          maxLength: 256
          description: "(Optional) Contact information of the responsible of the dataset, usually a name and email."
          example: "James Gordon (james@email.com)"
        draft:
          type: boolean
          description: "If true then the dataset is only visible and usable by the author, and some properties can be modified."
        creating:
          type: boolean
          description: |
            (This flag only appears when "draft" is true) 
            If true then the dataset is still creating, and "draft" can not be changed to false until the end (it does not appear in "dataset.editablePropertiesByTheUser"). 
            The progress can be retrieved with GET /datasets/{id}/creationStatus.
            If false then the creation process has finished and "draft" already can be changed to false when the user want to release de dataset.
        public:
          type: boolean
          description: |
            If false then the dataset is only visible and usable to users in the project where the dataset is assigned.
            If true then the dataset is accessible and usable to all users and visible for non-registered users.
        invalidated:
          type: boolean
          description: |
            If true the dataset can not be used and only visible for the author.
            The UI should show a visible warning including the reason, which is in the property "invalidationReason".
        invalidationReason:
          type: string
          maxLength: 128
          description: |
            (This property only appears and can be set when "invalidated" is true)
            When the user invalidates a dataset the UI should show a field to let the user specify the reason.
            It is recommended to show some predefined reasons like: 
            "It is a discarded/useless draft", "It contains some rejected subject or study", "It contains corrupted data", "Other".
            And if "Other" is selected, let the user write the reason.
          example: "It is a discarded/useless draft"
        corrupted:
          type: boolean
          description: |
            It is true when the integrity check has failed (files modified or even deleted). In that case, the dataset should be invalidated.
            You can see the date of the last check in "lastIntegrityCheck". The admin can see the details in the log of that date.
        lastIntegrityCheck:
          type: string
          format: date-time
          description: |
            The last time the integrity of dataset has been checked calculating the hash and comparing with the original saved in Tracer.
            It is null in newly created datasets and while not checked.
            If the check fails, the flag "corrupted" will be true.
          example: '2016-08-29T09:12:33.001Z'
        editablePropertiesByTheUser:
          type: array
          description: |
            The properties that can be modified with PATCH operation by the current authenticated user in the current state of this dataset. 
            The array will be empty if no properties can be modified.
            The UI can use this property to show which properties are editable.
          example: ["public", "invalidated", "name", "description"]
          items:
            type: string
        allowedActionsForTheUser:
          type: array
          description: |
            The actions that the current authenticated user can do in the current state of this dataset. 
            The actions are some operations apart from edit fields/flags which are already specified in the previous property "editablePropertiesByTheUser".
            So this property is intended for let the UI know which other actions to show apart from those related with flags, 
            like "Release" (change the flag "public") or "Invalidate" (change the flag "invalidated").
            Possible values are:
             * `use` - To launch a workstation in the platform with access to this dataset, 
                       The k8s operator will be able to do a POST /datasetAccess/{id} for this user on this dataset.
             * `delete` - To do a DELETE /datasets/{id}.
             * `checkIntegrity` - To do a POST /datasets/{id}/checkIntegrity.
             * `relaunchCreationJob` - To do a POST /datasets/{id}/relaunchCreationJob.
             * `viewAccessHistory` - To do a GET /datasets/{id}/accessHistory
             * `manageACL` - To do any operation in /datasets/{id}/acl and /datasets/{id}/acl/{username}
          example: ["use", "checkIntegrity"]
          items:
            type: string
            enum: 
             - "use"
             - "delete"
             - "checkIntegrity"
             - "relaunchCreationJob"
             - "viewAccessHistory"
             - "manageACL"
        studiesCount:
          type: integer
          description: "The number of studies contained in the dataset"
        subjectsCount:
          type: integer
          description: "The number of different subjects which are related with the studies contained in the dataset"
        ageLow:
          type: integer
          description: |
            [Miabis] Age of the youngest subject. Null if metadata still not collected or age data empty for all studies.
            Collected from Dicom tag (0010,1010) or from the subject clinical data (inclusion_criteria.age_at_diagnosis or .age_at_baseline).
          example: 54
        ageHigh:
          type: integer
          description: |
            [Miabis] Age of the oldest subject. Null if metadata still not collected or age data empty for all studies.
            Collected from Dicom tag (0010,1010) or from the subject clinical data (inclusion_criteria.age_at_diagnosis).
          example: 82
        ageUnit:
          type: array
          description: |
            [Miabis] Array of two items: unit for ageLow, unit for ageHigh. 
            Empty if metadata still not collected or age data empty for all studies.
          example: ["years", "years"]
          items:
            type: string
        ageNullCount:
          type: integer
          description: |
            The number of studies with unknown age data. 
            Null if metadata still not collected.
          example: 2
        sex:
          type: array
          description: |
            [Miabis] Array of different sex values in the dataset. Empty if metadata still not collected.
            Collected from Dicom tag (0010,0040) or from the subject clinical data (patient_data.gender).
            Miabis standard defines the possible values: "Male", "Female", "Undifferentiated", "Unknown".
          example: ["Male", "Female", "Unknown"]
          items:
            type: string
        sexCount:
          type: array
          description: |
            Array with the number of studies for each item of the previous 'sex' array. 
            Empty if metadata still not collected.
          example: [348, 170, 2]
          items:
            type: integer
        diagnosis:
          type: array
          description: |
            Array of different diagnosis values in the dataset. Empty if metadata still not collected.
            Collected from Dicom tag (70D1,2000), private tag (project name) defined in CHAIMELEON.
            Possible values: "Prostate cancer", "Breast cancer", "Lung cancer", "Colon cancer", "Rectum cancer", "Unknown".
          example: ["Colon cancer", "Rectum cancer", "Unknown"]
          items:
            type: string
        diagnosisCount:
          type: array
          description: |
            Array with the number of studies for each item of the previous 'diagnosis' array. 
            Empty if metadata still not collected.
          example: [348, 170, 2]
          items:
            type: integer
        bodyPart:
          type: array
          description: |
            Array of different body parts in the dataset. Empty if metadata still not collected.
            Collected from Dicom tag (0018,0015).
            Dicom standard defines the posible values.
            Additionally the value 'Unknown' will be added at the end if there is any case with empty body part data.
          example: ["LUNG", "BRAIN", "Unknown"]
          items:
            type: string
        bodyPartCount:
          type: array
          description: |
            Array with the number of studies for each item of the previous 'bodyPart' array. 
            Empty if metadata still not collected.
          example: [348, 170, 2]
          items:
            type: integer
        modality:
          type: array
          description: |
            Array of different image modalities in the dataset. Empty if metadata still not collected.
            Collected from Dicom tag (0008,0060).
            Dicom standard defines the posible values.
            Additionally the value 'Unknown' will be added at the end if there is any case with empty modality data.
          example: ["CT", "MR", "Unknown"]
          items:
            type: string
        modalityCount:
          type: array
          description: |
            Array with the number of studies for each item of the previous 'modality' array. 
            Empty if metadata still not collected.
          example: [348, 170, 2]
          items:
            type: integer
        manufacturer:
          type: array
          description: |
            Array of different image equipment manufacturers in the dataset. Empty if metadata still not collected.
            Collected from Dicom tag (0008,0070) and harmonized.
            Additionally the value 'Unknown' will be added at the end if there is any case with empty manufacturer data.
          example: ["Philips", "Siemens", "Unknown"]
          items:
            type: string
        manufacturerCount:
          type: array
          description: |
            Array with the number of studies for each item of the previous 'manufacturer' array. 
            Empty if metadata still not collected.
          example: [348, 170, 2]
          items:
            type: integer
        diagnosisYearLow:
          type: integer
          description: |
            The year of the oldest diagnosis. Null if metadata still not collected or year of diagnosis data empty for all studies.
            Collected from the subject clinical data (inclusion_criteria.baseline_date or .date_baseline_ct).
        diagnosisYearHigh:
          type: integer
          description: |
            The year of the most recent diagnosis. Null if metadata still not collected or year of diagnosis data empty for all studies.
            Collected from the subject clinical data (inclusion_criteria.baseline_date).
        diagnosisYearNullCount:
          type: integer
          description: |
            The number of studies with unknown year of diagnosis. 
            Null if metadata still not collected.
          example: 2
        seriesTags:
          type: array
          description: "Array of different tags in series of the studies of the dataset."
          example: ["Axial", "T2W"]
          items:
            type: string
        sizeInBytes:
          type: integer
          description: |
            The total size of files in all the studies and series selected for this dataset plus the eforms file. 
            Null if metadata still not collected.
          example: 2834502270

    Study:
      type: object
      properties:
        studyId:
          type: string
          maxLength: 40
          example: "5e5629835938d12160636353"
        studyName:
          type: string
          maxLength: 128
          example: "TCPEDITRICOABDOMINOPLVICOCONCONTRASTE"
        subjectName:
          type: string
          maxLength: 128
          description: "The subject name, which is anonymized and unique: there should be an entry in the subjects array with that code."
          example: "17B76FEW"
        series:
          type: array
          description: |
            Series considered in the dataset. 
            This is needed because new series can be added later in the datalake for this study but the dataset can not change.
          items:
            $ref: '#/components/schemas/Series'
        url:
          type: string
          maxLength: 256
          format: url
          description: "Link to the study in the case explorer web portal." 
          example: 'https://www.quibim.com/studies?id=5e5629835938d12160636353'
        sizeInBytes:
          type: integer
          description: |
            The total size of files in all the series selected for this study in the dataset. 
            Null if metadata still not collected.
          example: 182460520
          
    Series:
      type: object
      properties:
        folderName:
          type: string
          description: 'Directory name of the series'
          example: "AXT1XL"
        tags:
          type: array
          description: 'A list of tags assigned to the series'
          example: ["Axial", "T2W"]
          items:
            type: string

    Subject:
      type: object
      properties:
        subjectName:
          type: string
          maxLength: 128
          description: "The subject name, which is anonymized and unique"
        subjectId:
          type: string
          maxLength: 32
          description: "The datalake explorer internal ID"
        eForm:
          type: object
          description: "The clinical data of the subject"

    ProjectCode:
      type: string
      pattern: '^[a-zA-Z-]+$'
      minLength: 3
      maxLength: 16
      description: "The unique code of the project: short name without spaces (usually capital letters and numbers and hyphens instead of spaces)"
      example: "MY-PROJECT"
    
    ProjectLogoUrl:
      type: string
      description: |
        (Optional) Image path of the logo. Empty string if there is no logo for the project.
        The image will have an aspect ratio of 1:1.
      example: "https://chaimeleon-eu.i3m.upv.es/dataset-service/project-logos/77f3c1bm9d7h.png"

    ProjectDetails:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 160
          description: "The long name of the project or just the codename but without restrictions of spaces and so on."
          example: "Accelerating the lab to market transition of AI tools for cancer management"
        shortDescription:
          type: string
          example: "CHAIMELEON will set up an EU-wide structured repository for health imaging data as an open source for artificial intelligence (AI) experimentation in cancer management."
        externalUrl:
          type: string
          maxLength: 256
          description: "(Optional, default null) URL to the project web page."
          example: "https://some-project.org/"

    ProjectConfig:
      type: object
      properties:
        defaultContactInfo:
          type: string
          maxLength: 256
          description: |
            (Optional but recommended, default is empty) The default contact info assigned to new datasets. 
            Usually the contact information of the project manager, the project email or the url of contact form of the project. 
            The creator of a dataset can change later that contact info for his/her dataset.
          example: "project-manager@some-project.org or https://some-project.org/contact-form"
        defaultLicense:
          description: |
            (Optional, default is empty) The name and link to a default license document assigned to new datasets.
            It is useful when there is a custom license defined for the datasets of the project.
            The creator of a dataset can change later the license of his/her dataset.
          example: {"title": "Some Project Common License 1.0", "url": "https://some-project.org/datasets-license.pdf"}
          allOf:
            - $ref: '#/components/schemas/License'
        zenodoAccessToken:
          type: string
          maxLength: 128
          description: |
            (Optional, default is empty) The access token of the Zenodo account used to send datasets metadata when they are published. 
            You can get one if you register in zenodo.org:
              in your account settings, go to "Applications", create a "Personal access token" and set the scopes "deposit:actions", "deposit:write".
            If you leave it empty, the datasets from this project will not be able to be published.
          example: "iHU32BZJU8nosIkln89sd4FesEqbhfu4DIHbdsibgaa"
        zenodoAuthor:
          type: string
          maxLength: 128
          description: |
            (Optional, default is empty) The text that will appear as the author in dataset publications.
            That way you can set a collective authorship if the data can be provided by several sources. 
            If you leave it empty, the name of the user who created the dataset will appear as the author of publication.
          example: "SOME-PROJECT consortium"
        zenodoCommunity:
          type: string
          maxLength: 128
          description: |
            (Optional, default is empty) The community code which the dataset publications will be related to. 
            You can create one for your project in zenodo.org. 
            It is useful as a collection to easily find all the depositions of your project.
            If you leave it empty, the publications will no be related to any community.
          example: "some_project"
        zenodoGrant:
          type: string
          maxLength: 128
          description: |
            (Optional, default is empty) The grant code which the dataset publications will be related to.
          example: "10.13039/501100000780::952172"
      
    License:
      type: object
      description: "Name and link to the license document."
      properties:
        title:
          type: string
          maxLength: 128
          example: "CC BY 4.0"
        url:
          type: string
          maxLength: 256
          format: url
          example: "https://creativecommons.org/licenses/by/4.0/"

    DatasetAccess:
      type: object
      properties:
        creationTime:
          type: string
          format: date-time
          description: "Date and time when the dataset access was created (the access was granted)."
          example: '2023-09-19T09:52:13.001Z'
        username:
          type: string
          minLength: 3
          maxLength: 128
          description: "The name of the user wich accessed the dataset."
          example: "James Gordon"
        accessType:
          type: string
          enum: ["i", "b"]
          description: |
            The type of access: 'i' for interactive (for example: a desktop or web service) and 'b' for batch (a job).
          example: "b"
        toolName:
          type: string
          description: "The name of application, framework, docker image or helm chart used to analyze or process the datasets"
          example: "jupyter-tensorflow"
        toolVersion:
          type: string
          description: "The version of application, framework, docker image or helm chart used to analyze or process the datasets"
          example: "2.2.9"
        image:
          type: string
          description: "The image used for the container."
          example: "chaimeleon-library/ubuntu-python-tensorflow-desktop-jupyter:3.12"
        resourcesFlavor:
          type: string
          description: "The flavor of resources required by the job or deployment launched."
          example: "large-gpu"
        duration:
          type: integer
          description: |
            Specified only in jobs, and when the job has finished, otherwise null.
            The total execution time in minutes (from startTime to endTime).
          example: 23
        startTime:
          type: string
          format: date-time
          description: |
            Specified only in jobs, otherwise null.
            Date and time when the job was started in k8s.
          example: '2023-09-19T09:52:13.001Z'
        endTime:
          type: string
          format: date-time
          description: "Specified when the job or deployment has finished, otherwise null."
          example: '2023-09-19T10:29:19.001Z'
        endStatus:
          type: string
          description: "(Only for jobs) The end status of the job."
          example: "succeeded"
        cmdLine:
          type: string
          description: "(Only for jobs) The cmdLine used for the container."
          example: "# ls -lh"
        openchallengeJobType:
          type: string
          description: "The image used for the container."
          example: "training"


#   ErrorResponse:
#     type: object
#     properties:
#       error:
#         type: string
#         description: descriptive message
#       status_code:
#         type: string
#         description: HTTP status code
          
  responses:
    Unauthorized:
      description: "unauthorized user or access token is missing or invalid"
