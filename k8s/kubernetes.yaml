apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data
  namespace: dataset-service
spec:
  storageClassName: cephfs
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: dataset-service-data
  namespace: dataset-service
spec:
  storageClassName: cephfs
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
      
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  namespace: dataset-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      volumes:
        - name: postgres-data-pv
          persistentVolumeClaim:
            claimName: postgres-data
      containers:
      - name: db
#       image: "postgres:12"
        image: "harbor.chaimeleon-eu.i3m.upv.es/dockerhub/library/postgres:12"
        env:
          - name: POSTGRES_DB
            value: dataset-service
          - name: POSTGRES_USER
            value: dataset-service-user
          - name: POSTGRES_PASSWORD
            value: "XXXXXX"
        ports:
          - containerPort: 5432
            # standard postgres DB port
            name: "dbport"
        volumeMounts:
          - mountPath: "/var/lib/postgresql/data"
            name: postgres-data-pv
        resources:
          requests:
            memory: "250Mi"
            cpu: "250m"
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: dataset-service
spec:
  selector:
    app: db
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

---
apiVersion: v1
kind: Secret
metadata:
  name: dataset-service-ceph-user-secret
  namespace: dataset-service
type: Opaque
stringData:
  key: "XXXXXXXX"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dataset-service-backend
  namespace: dataset-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dataset-service-backend
  template:
    metadata:
      labels:
        app: dataset-service-backend
    spec:
      serviceAccountName: dataset-service-backend
      volumes:
        - name: dataset-service-data-volume
          persistentVolumeClaim:
            claimName: dataset-service-data
        - name: datalake-volume
          cephfs:
            path: "/data"
            monitors: 
              - "192.168.3.8:6789"
            user: dataset-service
            secretRef:
              name: dataset-service-ceph-user-secret
            readOnly: false
        - name: datasets-volume
          cephfs:
            path: "/datasets"
            monitors: 
              - "192.168.3.8:6789"
            user: dataset-service
            secretRef:
              name: dataset-service-ceph-user-secret
            readOnly: false
      containers:
        - name: dataset-service-backend
          image:  harbor.chaimeleon-eu.i3m.upv.es/chaimeleon-services/dataset-service-backend:1.82
          ports:
            - containerPort: 11000
              name: dssport
          volumeMounts:
            - mountPath: "/dataset-service/log"
              subPath: "log"
              name: dataset-service-data-volume
            - mountPath: "/var/www/dataset-service-ui"
              subPath: "ui"
              name: dataset-service-data-volume
            - mountPath: "/mnt/datalake"
              name: datalake-volume
            - mountPath: "/mnt/datasets"
              name: datasets-volume
          env:
            - name: DATASET_SERVICE_CONFIG
              value: |
                { "db": { "host": "db", "port": 5432, "dbname": "dataset-service", "user": "dataset-service-user", "password": "XXXXXX" },
                  "auth": {
                      "token_issuer_public_keys_url": "https://chaimeleon-eu.i3m.upv.es/auth/realms/CHAIMELEON/protocol/openid-connect/certs",
                      "kid": "T7yU60He9Irc8iNJ7zCBVUQEkXe9yq0XrHLu4fBi1gU",
                      "audience": ["dataset-service"],
                      "issuer": "https://chaimeleon-eu.i3m.upv.es/auth/realms/CHAIMELEON"
                  },
                  "tracer": {
                      "url": "https://chaimeleon-eu.i3m.upv.es/tracer-service/tracer/",
                      "auth_url": "https://chaimeleon-eu.i3m.upv.es/auth/realms/CHAIMELEON/protocol/openid-connect/token",
                      "client_id": "dataset-service",
                      "client_secret": "XXXXXXXX"
                  },
                  "zenodo": {
                      "url": "https://zenodo.org/",
                      "access_token": "XXXXXXXX",
                      "community": "chaimeleon_h2020",
                      "grant": "10.13039/501100000780::952172"
                  },
                  "self": { 
                      "port": 11000, 
                      "log": { "level": "DEBUG", "file": "./log/dataset-service.log" },
                      "static_files_dir_path": "/var/www/dataset-service-ui",
                      "datalake_mount_path": "/mnt/datalake",
                      "datasets_mount_path": "/mnt/datasets"
                  }
                }
          resources:
            requests:
              memory: "250Mi"
              cpu: "300m"
      restartPolicy: Always
      
---
apiVersion: v1
kind: Service
metadata:
  name: dataset-service-backend-service
  namespace: dataset-service
spec:
  selector:
    app: dataset-service-backend
  ports:
    - port: 11000
      protocol: TCP
      targetPort: dssport

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dataset-service-backend-proxy
  namespace: dataset-service
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
#   nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
# tls:
#   - hosts:
#       - chaimeleon-eu.i3m.upv.es
#         secretName:  chaimeleon-eu.i3m.upv.es
  rules:
    - host: chaimeleon-eu.i3m.upv.es
      http:
        paths:
          - path: /dataset-(service|manager)/?(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: dataset-service-backend-service
                port:
                  number: 11000

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dataset-service-backend
  namespace: dataset-service

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: dataset-service-backend
  namespace: dataset-service
rules:
  # create jobs is required for dataset creation
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["create"]
  # get deployments is required to copy some parts of the main service deployment to the jobs
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get"]
    
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dataset-service-backend
  namespace: dataset-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dataset-service-backend
subjects:
  - kind: ServiceAccount
    name: dataset-service-backend
    namespace: dataset-service
